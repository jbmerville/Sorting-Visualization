{"version":3,"sources":["Bars.js","Sorted.js","Array.js","Buttons.js","Slider.js","index.js"],"names":["Bars","props","style","height","className","selected","key","id","Math","round","Sorted","text","Array","sleep","time","Promise","resolve","setTimeout","bars","i","arr","length","push","state","arraySize","sorted","speed","unlock","this","setState","end","swapAndShowSwapped","start","mergeSortHelper","middle","floor","merge","right","arrRef","shiftElementsToRight","updateArray","y","from","to","array","ref","low","high","quickSortHelper","setBarsGreen","partition","pi","shellSortHelper","gap","temp","j","pivot","index1","index2","i1","i2","swap","helperRender","React","Component","Buttons","runAlgorithm","event","locked","onButtonClick","algo","runOnClick","logo","hoverText","position","color","data-tooltip","data-position","onClick","Slider","bind","size","e","preventDefault","target","value","disabled","type","onChange","min","max","App","child","createRef","newArray","random","canArray","algorithm","current","bubbleSort","mergeSort","quickSort","shellSort","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.14d4e19f.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nconst Bars = (props) => {\n    return (\n        <div style={{height: props.height}} className={`bar ${props.selected}`} key={props.id}>\n            <div className=\"heights\">{Math.round(props.height/10)}</div>\n        </div>\n    );\n};\n\nexport default Bars;","import React from \"react\";\n\nconst Sorted = (props) => {\n    return (\n        <div className=\"ui floating message\">\n            <h3>{props.text}</h3>\n        </div>\n    );\n};\n\nexport default Sorted;","import React from \"react\";\nimport Bars from \"./Bars\";\nimport Sorted from \"./Sorted\";\n\nclass Array extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let bars = [];\n        for(let i = 0; i < props.arr.length; i++) {\n            bars.push(<Bars  height={props.arr[i]} selected={false}/>);\n        }\n        this.state = {arraySize: props.arr.length, arr: props.arr, bars: bars, sorted: false, speed: 10, unlock: props.unlock};\n    }\n\n    // Update the array representing the class and the bars that represent it.\n    updateArray(arr) {\n        let bars = [];\n        for(let i = 0; i < arr.length; i++) {\n            bars.push(<Bars height={arr[i]} selected={false}/>);\n        }\n        this.setState({arr: arr, bars: bars, sorted: false, arraySize: arr.length});\n    }\n\n    // Make an async function sleep for time in milliseconds. \n    sleep = (time) => {\n        return new Promise(resolve => setTimeout(resolve, time))\n    }\n\n    // Bubble Sort the array.\n    async bubbleSort() {\n        let end = this.state.arraySize;\n        while (end > 0) {\n            let bars = this.state.bars;\n            for (let i = 1;  i < end; i++) {\n                let arr = this.state.arr;\n                if (i > 0)  {\n                    if (arr[i-1] >  arr[i]) {\n                        this.swapAndShowSwapped(i, i-1, arr, bars);\n                        await this.sleep(this.state.speed/2);\n                    }\n                    \n                    bars[i-1] = <Bars key={i-1} height={this.state.arr[i-1]} selected={''}/>;\n\n                }\n                bars[i] = <Bars key={i} height={this.state.arr[i]} selected=\"current\"/>;\n                this.setState({arr: arr, bars: bars});\n                await this.sleep(this.state.speed);\n            }\n            end -= 1;\n            bars[end] = <Bars key={end} height={this.state.arr[end]} selected=\"selected\"/>;\n            this.setState({bars: bars});\n        }\n        this.setState({sorted: true});\n        this.state.unlock();\n    }\n\n    async mergeSort(start, end){\n        await this.mergeSortHelper(start, end);\n        this.state.unlock();\n    }\n    // Merge Sort the array.\n    async mergeSortHelper(start, end) {\n        if (start < end){\n            let middle =  Math.floor((start + end) / 2);\n            await this.mergeSortHelper(start, middle);\n            await this.mergeSortHelper(middle + 1, end);\n            await this.merge(start, middle, end);\n            this.setState({sorted: true});\n        }\n    }\n\n    async merge(start, middle, end) {\n        let sorted = false;\n        let arr = this.state.arr; \n        let right = middle + 1;\n        if (start === 0 && end === arr.length-1) sorted = true;\n        for (let i = start; i <= end; i++) {\n            if (right <= end && arr[i] >= arr[right]) {\n                let arrRef = arr[right];\n                arr = this.shiftElementsToRight(i+1, right, arr);\n                arr[i] = arrRef;\n                right++;\n            }\n            this.updateArray(arr);\n            let bars = this.state.bars;\n            if (right < bars.length) bars[right] = bars[right] = <Bars key={right} height={this.state.arr[right]} selected=\"current\"/>;\n            if (!sorted) bars[i] = <Bars key={i} height={this.state.arr[i]} selected=\"current\"/>;\n            else {\n                for (let y = 0; y <= i; y++){\n                    bars[y] = <Bars key={y} height={this.state.arr[y]} selected=\"selected\"/>;\n                }\n            }\n            this.setState({bars: bars});\n            await this.sleep(this.state.speed); \n        }\n    }\n\n    shiftElementsToRight(from, to, array){\n        let ref = [...array];\n        for (let i = from; i <= to; i++){\n            array[i] = ref[i-1];\n        }\n        return array;\n    }\n\n    async quickSort(low, high) {\n        await this.quickSortHelper(low, high);\n        this.setBarsGreen();\n        this.setState({sorted: true});\n        this.state.unlock();\n    }\n\n    async quickSortHelper(low, high) {\n        if (low < high) {\n            let pi = await this.partition(low, high);\n            await this.quickSortHelper(low, pi - 1);  // Before pi\n            await this.quickSortHelper(pi + 1, high); // After pi   \n        }\n       \n    }\n    async shellSort(){\n        await this.shellSortHelper();\n        this.setBarsGreen();\n        this.setState({sorted: true});\n        this.state.unlock();\n    }\n\n    async shellSortHelper(){\n        let arr = this.state.arr;\n        for (let gap = this.state.arraySize/2; gap > 0; gap = Math.floor(gap/2)) \n        { \n            for (let i = gap; i < this.state.arraySize; i += 1) \n            { \n                let temp = arr[i]; \n                let j = i;\n                for ( j = i; j >= gap && arr[j - gap] > temp; j -= gap) \n                {\n                    arr[j] = arr[j - gap]; \n                    this.updateArray(arr);\n                    let bars = this.state.bars;\n                    bars[j] = <Bars key={j} height={this.state.arr[j]} selected=\"current\"/>;\n                    this.setState({bars: bars});\n                    await this.sleep(this.state.speed); \n                }\n                arr[j] = temp; \n                this.updateArray(arr);\n                let bars = this.state.bars;\n                bars[j] = <Bars key={j} height={this.state.arr[j]} selected=\"swap\"/>;\n                this.setState({bars: bars});\n                await this.sleep(this.state.speed); \n            } \n        } \n    }\n\n    async setBarsGreen() {\n        let bars = this.state.bars;\n        for (let i = 0; i < bars.length; i++){\n            bars[i] = <Bars key={i} height={this.state.arr[i]} selected=\"selected\"/>;\n        }\n        this.setState({bars: bars});\n    }\n\n    async partition (low, high)\n    {\n        let arr = this.state.arr;\n        let pivot = arr[high];  \n    \n        let i = (low - 1);  // Index of smaller element\n        let bars = this.state.bars;\n        bars[high] = <Bars key={high} height={this.state.arr[high]} selected=\"current\"/>;\n        this.setState({bars: bars});\n        await this.sleep(this.state.speed); \n        for (let j = low; j < high; j++)\n        {\n            // If current element is smaller than the pivot\n            if (arr[j] < pivot)\n            {\n                i++;    // increment index of smaller element\n                bars = this.state.bars;\n                this.swapAndShowSwapped(i, j, arr, bars);\n                await this.sleep(this.state.speed/2); \n                bars[i] = <Bars key={i} height={this.state.arr[i]} selected=\"\"/>;\n                bars[j] = <Bars key={j} height={this.state.arr[j]} selected=\"\"/>;\n                bars[low] = <Bars key={low} height={this.state.arr[low]} selected=\"current\"/>;\n                this.setState({bars: bars});\n                await this.sleep(this.state.speed); \n            }\n        }\n        bars = this.state.bars;\n        this.swapAndShowSwapped(i+1, high, arr, bars);\n        await this.sleep(this.state.speed); \n        bars[low] = <Bars key={low} height={this.state.arr[low]} selected=\"\"/>;\n        bars[i+1] = <Bars key={i+1} height={this.state.arr[i+1]} selected=\"\"/>;\n        bars[high] = <Bars key={high} height={this.state.arr[high]} selected=\"\"/>;\n        this.setState({bars: bars});\n        return i + 1;\n    }\n    \n\n\n  \n    // Swaps 2 element of an array at index1 and index2.\n    swap(index1, index2, arr){\n        let ref = arr[index1];\n        arr[index1] = arr[index2];\n        arr[index2] = ref;\n        return arr;\n    }\n\n    // Swap 2 element of the state array and the corresponding bars JSX array. And highlight the 2 element swapped. \n    swapAndShowSwapped(i1, i2, arr, bars) {\n        arr = this.swap(i1, i2, arr);\n        bars = this.swap(i1, i2, bars);\n        bars[i1] = <Bars key={i1} height={this.state.arr[i1]} selected=\"swap\"/>;\n        bars[i2] = <Bars key={i2} height={this.state.arr[i2]} selected=\"swap\"/>;\n        this.setState({arr: arr, bars: bars});\n    }\n\n    helperRender() {\n        if (this.state.sorted) {\n            return (\n                <div className=\"container\">\n                    {this.state.bars}\n                    <Sorted text=\"The array is sorted!\"/>\n                </div>\n            );\n        }\n        return (\n            <div className=\"container\">\n                {this.state.bars}\n            </div>\n        );\n    }\n\n    render() {\n        return this.helperRender();\n    }\n\n}\n\nexport default Array;","import React from \"react\";\n\nclass Buttons extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {algo: props.algo, text: props.text, onButtonClick: props.runOnClick, logo: props.logo, hoverText: props.hoverText, position: props.position};\n    }\n\n    runAlgorithm = event => {\n        if (!this.props.locked) this.state.onButtonClick(this.state.algo);\n    }\n\n    render() {\n        let color = \"white inverted\";\n        if (this.props.locked) color = \"secondary \";\n\n        if (this.state.logo){\n            return (\n                <div className={`${color} ui button`} data-tooltip={this.state.hoverText} data-position={`bottom ${this.state.position}`} onClick={this.runAlgorithm} ><i className={`${this.state.logo} icon`}></i>{this.state.text}</div>\n            );\n        }\n        else {\n            return (\n                <div className={`${color} ui button`} data-tooltip={this.state.hoverText} data-position={`bottom ${this.state.position}`} onClick={this.runAlgorithm} >{this.state.text}</div>\n            );\n        }\n    }\n}\n\nexport default Buttons;","import React from \"react\";\n\nclass Slider extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.runAlgorithm = this.runAlgorithm.bind(this);\n        this.state = {size: props.size, text: props.text, onButtonClick: props.runOnClick};\n    }\n\n    runAlgorithm (e){\n        e.preventDefault();\n        this.setState({size: e.target.value});\n        this.state.onButtonClick(this.state.size);\n    }\n\n    render() {\n        if (this.props.locked) {\n            return (\n                <div className=\"slider\">\n                    <div>{this.state.text}: {this.state.size}</div>\n                    <input disabled type=\"range\" onChange={this.runAlgorithm} min=\"5\" max=\"200\" value={this.state.size}/>\n                </div>\n            );\n        } \n        return (\n            <div className=\"slider\">\n                <div>{this.state.text}: {this.state.size}</div>\n                <input type=\"range\" onChange={this.runAlgorithm} min=\"5\" max=\"200\" value={this.state.size}/>\n            </div>\n        );\n    }\n}\n\nexport default Slider;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Array from \"./Array\";\nimport Buttons from \"./Buttons\";\nimport Slider from \"./Slider\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.child = React.createRef();\n        this.onButtonClick = this.onButtonClick.bind(this);\n        this.unlock = this.unlock.bind(this);\n        this.newArray = this.newArray.bind(this);\n        let arr = [];\n        for (let i = 0; i < 100; i++){\n            arr.push((Math.random() * 600) + 10);\n        }\n        this.state = {arr: arr, size: 100, locked: false, canArray: true};\n      }\n\n    onButtonClick(algorithm) {\n        this.setState({locked: true});\n        if (algorithm === \"bubbleSort\") {\n            this.child.current.bubbleSort();\n        }\n        else if (algorithm === \"mergeSort\") {\n            this.child.current.mergeSort(0, this.child.current.state.arraySize - 1);\n        }\n        else if (algorithm === \"quickSort\") {\n            this.child.current.quickSort(0, this.child.current.state.arraySize - 1);\n        }\n        else if (algorithm === \"shellSort\") {\n            this.child.current.shellSort();\n        }\n    }\n\n\n    unlock() {\n        this.setState({locked: false});\n    }\n\n    newArray(size) {\n        if (!size) size = this.state.size;\n        else this.setState({size: size});\n        let arr = [];\n        for (let i = 0; i < size; i++){\n            arr.push((Math.random() * 500) + 10);\n        }\n        this.setState({arr: arr});\n        this.child.current.updateArray(arr);\n    }\n\n    render(){\n        return (\n            <div className=\"app-container\">\n                <div className=\"header\">\n                    <Slider text=\"Array Size\" locked={this.state.locked} runOnClick={this.newArray} size=\"100\"/>\n                    <Buttons text=\"New Array\" locked={this.state.locked} logo=\"add\" runOnClick={this.newArray} size=\"100\"/>\n                    <Buttons text=\"Bubble Sort\" locked={this.state.locked} hoverText=\"Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.\" runOnClick={this.onButtonClick} algo=\"bubbleSort\" position=\"center\"/>\n                    <Buttons text=\"Merge Sort\" locked={this.state.locked} hoverText=\"Merge Sort is a Divide and Conquer algorithm. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves.\" runOnClick={this.onButtonClick} algo=\"mergeSort\" position=\"center\"/>\n                    <Buttons text=\"Quick Sort\" locked={this.state.locked} hoverText=\"Quick Sort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot.\" runOnClick={this.onButtonClick} algo=\"quickSort\" position=\"right\" />\n                    <Buttons text=\"Shell Sort\" locked={this.state.locked} hoverText=\"Shell Sort is mainly a variation of Insertion Sort. In insertion sort, we move elements only one position ahead. When an element has to be moved far ahead, many movements are involved. The idea of shellSort is to allow exchange of far items.\" runOnClick={this.onButtonClick} algo=\"shellSort\" position=\"right\" />\n                </div>\n                    <Array arr={this.state.arr} unlock={this.unlock} ref={this.child}/>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <App />,\n    document.querySelector(\"#root\")\n);"],"sourceRoot":""}